@page "/paginageneratorepassword"

<PageTitle>Generatore Password</PageTitle>
<h1>Generatore <span class="badge bg-secondary">Password</span></h1>

<div class="form-check">
    <input class="form-check-input" type="radio"
           @onchange="@(() => generatorePassword.SetTipoPassword(TipoPassword.AlfabetoPersonalizzato))"
           name="radioTipoPassword" id="flexRadioAlfabetoPersonalizzato">
    <label class="form-check-label" for="flexRadioAlfabetoPersonalizzato">
        Alfabeto Personalizzato
    </label>
</div>
<div class="form-check">
    <input class="form-check-input" type="radio"
           @onchange="@(() => generatorePassword.SetTipoPassword(TipoPassword.Cifre))"
           name="radioTipoPassword" id="flexRadioDefault1">
    <label class="form-check-label" for="flexRadioDefault1">
        Cifre
    </label>
</div>
<div class="form-check">
    <input class="form-check-input" type="radio"
           @onchange="@(() => generatorePassword.SetTipoPassword(TipoPassword.Lettere))"
           name="radioTipoPassword" id="flexRadioDefault2" checked>
    <label class="form-check-label" for="flexRadioDefault2">
        Cifre e Lettere
    </label>
</div>
<div class="form-check">
    <input class="form-check-input" type="radio"
           @onchange="@(() => generatorePassword.SetTipoPassword(TipoPassword.CaratteriSpeciali))"
           name="radioTipoPassword" id="flexRadioDefault3">
    <label class="form-check-label" for="flexRadioDefault3">
        Cifre, Lettere e Caratteri Speciali
    </label>
</div>
<input @bind="@generatorePassword.Alfabeto" @bind:event="oninput" id="inputAlfabeto" class="form-control">

<div class="col-auto">
    <button @onclick="SalvaInAlfabetoPersonalizzato" class="btn btn-primary mb-3">Salva in alfabeto personalizzato</button>
</div>

<label for="inputAlfabeto" class="form-label">Alfabeto</label>
<p>
    @generatorePassword.Alfabeto
</p>

<label for="lunghezzaPasswordRange" class="form-label">Lunghezza Password <span class="badge bg-secondary">@lunghezza</span></label>
<input type="range" @bind="@lunghezza" min="3" max="20" step="1" class="form-range" id="lunghezzaPasswordRange">
<p>Lunghezza password media = @GeneratorePassword.LunghezzaPasswordMedia()</p>
<div class="form-check">
    <input class="form-check-input" type="checkbox" @bind="@DeveAvereUnaMaiuscola" disabled="@(!GeneratorePassword.AlmenoUnaLetteraMaiuscola(generatorePassword.Alfabeto))"
           id="flexCheckDefault1">
    <label class="form-check-label" for="flexCheckDefault1">
        Almeno una lettera maiuscola @AlmenoUnaLetteraMaiuscola
    </label>
</div>
<div class="form-check">
    <input class="form-check-input" type="checkbox" @bind="@almenoUnCarattereSpeciale" disabled="@(!GeneratorePassword.AlmenoUnCarattereSpeciale(generatorePassword.Alfabeto))"
           id="flexCheckChecked">
    <label class="form-check-label" for="flexCheckChecked">
        Almeno un carattere speciale @almenoUnCarattereSpeciale
    </label>
</div>

<button @onclick="GeneraNuovaPassword">Nuova Password</button>
<p>
    @NuovaPassword
</p>
@code {
    private int lunghezza = 10;
    private string NuovaPassword = "";
    private TipoPassword tPassword = TipoPassword.CaratteriSpeciali;
    private GeneratorePassword generatorePassword = new();

    private bool almenoUnaLetteraMaiuscola = false;

    public bool AlmenoUnaLetteraMaiuscola
    {
        get => almenoUnaLetteraMaiuscola;
        set
        {
            if (!GeneratorePassword.AlmenoUnaLetteraMaiuscola(generatorePassword.Alfabeto))
                almenoUnaLetteraMaiuscola = false;
            else
                almenoUnaLetteraMaiuscola = value;
        }
    }

    private bool deveAvereUnaMaiuscola = false;
    public bool DeveAvereUnaMaiuscola
    {
        get
        {
            if (!GeneratorePassword.AlmenoUnaLetteraMaiuscola(generatorePassword.Alfabeto))
                return false;
            else
                return deveAvereUnaMaiuscola;
        }
        set => deveAvereUnaMaiuscola = value;
    }

    private bool almenoUnCarattereSpeciale = false;

    void GeneraNuovaPassword()
    {
        string psw = generatorePassword.NuovaPassword(lunghezza); ;
        if (AlmenoUnaLetteraMaiuscola && almenoUnCarattereSpeciale)
            while (!(GeneratorePassword.AlmenoUnaLetteraMaiuscola(psw) && GeneratorePassword.AlmenoUnCarattereSpeciale(psw)))
            {
                psw = generatorePassword.NuovaPassword(lunghezza);
            }
        else if (almenoUnCarattereSpeciale)
            while (!GeneratorePassword.AlmenoUnCarattereSpeciale(psw))
            {
                psw = generatorePassword.NuovaPassword(lunghezza);
            }
        else if (AlmenoUnaLetteraMaiuscola)
            while (!GeneratorePassword.AlmenoUnaLetteraMaiuscola(psw))
            {
                psw = generatorePassword.NuovaPassword(lunghezza);
            }
        NuovaPassword = psw;
    }
    private void SalvaInAlfabetoPersonalizzato()
    {
        File.WriteAllText(generatorePassword.PathAlfabeto, generatorePassword.Alfabeto);
    }
}
