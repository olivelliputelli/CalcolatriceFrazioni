@page "/viewprodotti"

@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject NavigationManager Nav




<label>
    Filtro
    <input @bind="Filtro" @bind:event="oninput" />
</label>
<label>
    Categorie
    <select @onchange="SelectedCategorieChanged" multiple>
        <option value="">Categoria ...</option>
        @foreach (var item in Categorie)
        {
            <option value="@item.Nome">@item.Nome</option>
        }
    </select>
</label>
@if (SelectedCategorie is not null)
{
    <div class="alert alert-info" role="alert">
        Categorie Scelte: @string.Join(", ", SelectedCategorie)
    </div>
}

@if (ProdottiFiltrati?.Count > 0)
{
    <div class="card-deck">

        @foreach (var item in ProdottiFiltrati)
        {
            <div class="card">
                <img src=@item.ImagePath class="card-img-top" alt=@item.Descrizione>
                <div class="card-body">
                    <h5 class="card-title">@item.Nome</h5>
                    <p class="card-text">@item.Descrizione</p>
                    <p class="card-text"><small class="text-muted">Last updated 3 mins ago</small></p>
                    <p class="card-text"><small class="text-muted"><a href=@($"viewprodotto/{@item.ProdottoId}")>dettagli..</a></small></p>
                </div>
            </div>
        }
    </div>

}
else
{
    <div class="alert alert-warning" role="alert">
        Non ci sono prodotti da mostrare!
    </div>
}

@code {
    private bool IsAdd = true;
    private bool IsCrescentePerPrezzo { get; set; } = true;
    public string Filtro { get; set; } = "";
    private Prodotto? Prodotto { get; set; } = new();
    private List<Prodotto>? Prodotti { get; set; } = new();
    private List<Prodotto>? prodottiFiltrati;
    public string[] SelectedCategorie { get; set; }

    public List<Prodotto>? ProdottiFiltrati
    {
        get
        {
            List<Prodotto> temp = Prodotti.Where(p => p.Nome.ToLower().Contains(Filtro.ToLower())).ToList();

            //if (SelectedCategorie is not null && SelectedCategorie.Count() > 0)
            //{
            //    temp = temp.Where(p => SelectedCategorie.Contains(p.Categoria.Nome)).ToList();
            //}
            return temp;

        }
    }

    private List<Categoria>? Categorie { get; set; } = new();

    private void AggiungiProdotto()
    {
        Nav.NavigateTo("addprodotto");
    }

    protected override void OnInitialized()
    {
        LoadProdotti();
    }

    private void Elimina(Prodotto prodottoDaEliminare)
    {
        using var context = DbFactory.CreateDbContext();
        context.Remove(prodottoDaEliminare);
        context.SaveChanges();
        LoadProdotti();
    }

    private void LoadProdotti()
    {
        using var context = DbFactory.CreateDbContext();
        Prodotti = context.Prodotti.ToList();
        Categorie = context.Categorie.ToList();
    }

    private void SelectedCategorieChanged(ChangeEventArgs e)
    {
        if (e.Value is not null)
        {
            SelectedCategorie = (string[])e.Value;
        }
    }

}
