@page "/addprodotto"
@page "/addprodotto/{ProdottoId:int}"

@using Microsoft.AspNetCore.Hosting

@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject IWebHostEnvironment Ambiente
@inject NavigationManager Nav

<PageTitle>@TitoloPagina</PageTitle>
<h3>@TitoloPagina</h3>
<EditForm Model="@Prodotto" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <h2>🆔 Identificazione</h2>
    <div class="mb-3">
        <label>
            Nome prodotto:
            <InputText class="form-control" @bind-Value="Prodotto.Nome" />
        </label>
    </div>
    <div class="mb-3">
        <label>
            Descrizione:
            <InputTextArea class="form-control" rows="3" @bind-Value="Prodotto.Descrizione" />
        </label>
    </div>

    <label>
        Categoria
        <InputSelect @bind-Value="Prodotto.CategoriaId">
            <option value="">Categoria ...</option>
            @foreach (var item in Categorie)
            {
                <option value="@item.CategoriaId">@item.Nome</option>
            }
        </InputSelect>
    </label>
    <label>
        Prezzo
        <InputNumber @bind-Value="Prodotto.Prezzo" />
    </label>
    <label>
        Iva
        <InputNumber @bind-Value="Prodotto.Iva" />
    </label>
    <label>
        Nuovo
        <InputCheckbox @bind-Value="Prodotto.IsNuovo" />
    </label>

    <InputFile OnChange="@LoadFile" />

    @if (IsAdd)
    {
        <button type="submit" class="btn btn-primary">
            Aggiungi nuovo prodotto
        </button>
    }
    else
    {
        <button type="submit" class="btn btn-warning">
            Salva modifiche
        </button>
    }
</EditForm>

@code {
    [Parameter]
    public int? ProdottoId { get; set; } = null;
    private string TitoloPagina { get; set; } = "Nuovo prodotto";
    private bool IsAdd = true;
    private Prodotto? Prodotto { get; set; } = new();
    private List<Categoria>? Categorie { get; set; } = new();
    private IBrowserFile loadedFile;
    private string? imgPath;

    protected override void OnInitialized()
    {
        if (ProdottoId is not null)
        {

            TitoloPagina = $"Modifica il prodotto con ID {ProdottoId}";
            IsAdd = false;
            using var context = DbFactory.CreateDbContext();
            Prodotto = context.Prodotti.Find(ProdottoId);
        }
        LoadCategorie();
    }

    private async void HandleValidSubmit()
    {
        ApplicationDbContext context = DbFactory.CreateDbContext();
        if (loadedFile != null)
        {
            await DownloadFile();
            Prodotto.ImagePath = imgPath;
            imgPath = null;
        }
        if (IsAdd)
            context.Add(Prodotto);
        else
            context.Update(Prodotto);
        context.SaveChanges();
        IsAdd = true;
        Prodotto = new();
        Nav.NavigateTo("/fetchprodotti");
    }

    private void LoadFile(InputFileChangeEventArgs e) => loadedFile = e.File;
    private async Task DownloadFile()
    {
        var trustedFileNameForFileStorage = Path.GetRandomFileName() + ".png";
        var path = Path.Combine(Ambiente.ContentRootPath, "wwwroot\\", "uploads\\immagini\\prodotti\\", trustedFileNameForFileStorage);
        imgPath = "\\uploads\\immagini\\prodotti\\" + trustedFileNameForFileStorage;
        await using FileStream fs = new(path, FileMode.Create);
        await loadedFile.OpenReadStream(int.MaxValue).CopyToAsync(fs);
    }

    private void Elimina(Prodotto prodottoDaEliminare)
    {
        using var context = DbFactory.CreateDbContext();
        context.Remove(prodottoDaEliminare);
        context.SaveChanges();
        LoadCategorie();
    }

    private void Modifica(Prodotto prodottoDaModificare)
    {
        IsAdd = false;
        Prodotto = prodottoDaModificare;
    }

    private void LoadCategorie()
    {
        using var context = DbFactory.CreateDbContext();
        Categorie = context.Categorie.ToList();
    }
}
