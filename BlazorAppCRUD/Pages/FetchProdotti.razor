@page "/fetchprodotti"

@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject NavigationManager Nav

        <button class="btn btn-primary" @onclick='AggiungiProdotto'>
            Aggiungi nuovo prodotto
        </button>
        <input @bind="Filtro" @bind:event="oninput" @onchange="Filtra"  />
@if (Prodotti?.Count > 0)
{
    <table class="table">
        <thead>
            <tr>
                <th>#</th>
                <th>Nome Prodotto</th>
                <th>Categoria</th>
                <th>Prezzo</th>
                <th>Scadenza garanzia</th>
                <th>Operazioni</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Prodotti)
            {
                <tr>
                    <td>@item.ProdottoId</td>
                    <td><a href=@($"viewprodotto/{@item.ProdottoId}")>@item.Nome</a></td>
                    <td>@item.Categoria?.Nome</td>
                    <td>@($"{item.Prezzo:C}")</td>
                    <td>@item.DataScadenzaGaranzia?.ToLongDateString()</td>
                    <td>
                        <button @onclick="@(() => Elimina(item))" class="btn btn-danger">
                            Elimina
                        </button>
                        <button @onclick="@(() => Modifica(item))" class="btn btn-secondary">
                            Modifica
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <div class="alert alert-warning" role="alert">
        Non ci sono categorie da mostrare!
    </div>
}

@code {
    private bool IsAdd = true;
    public string Filtro { get; set; } = "";
    private Prodotto? Prodotto { get; set; } = new();
    private List<Prodotto>? Prodotti { get; set; } = new();
    private List<Categoria>? Categorie { get; set; } = new();

    private void AggiungiProdotto()
    {
        Nav.NavigateTo("addprodotto");
    }

    protected override void OnInitialized()
    {
        LoadProdotti();
    }

    private void Elimina(Prodotto prodottoDaEliminare)
    {
        using var context = DbFactory.CreateDbContext();
        context.Remove(prodottoDaEliminare);
        context.SaveChanges();
        LoadProdotti();
    }

    private void Modifica(Prodotto prodottoDaModificare)
    {
        Nav.NavigateTo($"addprodotto/{prodottoDaModificare.ProdottoId}");
        Prodotto = prodottoDaModificare;
    }

    private void Filtra()
    {
         using var context = DbFactory.CreateDbContext();
        Prodotti = context.Prodotti.Where(p => p.Nome.Contains(Filtro)).ToList();

    }

    private void LoadProdotti()
    {
        using var context = DbFactory.CreateDbContext();
        Prodotti = context.Prodotti.ToList();
        Categorie = context.Categorie.ToList();
    }
}
