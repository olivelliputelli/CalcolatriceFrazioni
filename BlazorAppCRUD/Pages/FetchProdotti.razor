@page "/fetchprodotti"

@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject NavigationManager Nav

<AuthorizeView>
    <Authorized>
        <button class="btn btn-primary" @onclick='AggiungiProdotto'>
            Aggiungi nuovo prodotto
        </button>
    </Authorized>
    <NotAuthorized>
        <p>
            Operazioni CRUD solo per gli utenti registrati!
        </p>
    </NotAuthorized>
</AuthorizeView>


<label>
    Filtro
    <input @bind="Filtro" @bind:event="oninput" />
</label>
<label>
    Categorie
    <select @onchange="SelectedCategorieChanged" multiple>
        <option value="">Categoria ...</option>
        @foreach (var item in Categorie)
        {
            <option value="@item.Nome">@item.Nome</option>
        }
    </select>
</label>
@if (SelectedCategorie is not null)
{
    <div class="alert alert-info" role="alert">
        Categorie Scelte: @string.Join(", ", SelectedCategorie)
    </div>
}

@if (ProdottiFiltrati?.Count > 0)
{
    <table class="table">
        <thead>
            <tr>
                <th>#</th>
                <th>Nome Prodotto</th>
                <th>Categoria</th>
                <th>
                    <button @onclick="OrdinaPerPrezzo">
                        Prezzo
                    </button>
                </th>
                <th>Scadenza garanzia</th>
                <AuthorizeView>
                    <th>Operazioni</th>
                </AuthorizeView>

            </tr>
        </thead>
        <tbody>
            @foreach (var item in ProdottiFiltrati)
            {
                <tr>
                    <td>@item.ProdottoId</td>
                    <td><a href=@($"viewprodotto/{@item.ProdottoId}")>@item.Nome</a></td>
                    <td>@item.Categoria?.Nome</td>
                    <td>@($"{item.Prezzo:C}")</td>
                    <td>@item.DataScadenzaGaranzia?.ToLongDateString()</td>
                    <AuthorizeView>
                        <td>
                            <button @onclick="@(() => Elimina(item))" class="btn btn-danger">
                                Elimina
                            </button>
                            <a class="btn btn-primary" title="Modifica" href=@($"/addprodotto/{item.ProdottoId}")>
                                Modifica
                            </a>
                        </td>
                    </AuthorizeView>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <div class="alert alert-warning" role="alert">
        Non ci sono prodotti da mostrare!
    </div>
}

@code {
    private bool IsAdd = true;
    private bool IsCrescentePerPrezzo { get; set; } = true;
    public string Filtro { get; set; } = "";
    private Prodotto? Prodotto { get; set; } = new();
    private List<Prodotto>? Prodotti { get; set; } = new();
    private List<Prodotto>? prodottiFiltrati;
    public string[] SelectedCategorie { get; set; }

    public List<Prodotto>? ProdottiFiltrati
    {
        get
        {
            List<Prodotto> temp = Prodotti.Where(p => p.Nome.ToLower().Contains(Filtro.ToLower())).ToList();

            if (SelectedCategorie is not null && SelectedCategorie.Count() > 0)
            {
                temp = temp.Where(p => SelectedCategorie.ToList().Contains(p.Categoria.Nome)).ToList();

                if (IsCrescentePerPrezzo)
                    temp = temp.OrderBy(p => p.Prezzo).ToList();
                else
                    temp = temp.OrderByDescending(p => p.Prezzo).ToList();
            }



            return temp;
        }
    }

    private List<Categoria>? Categorie { get; set; } = new();

    private void AggiungiProdotto()
    {
        Nav.NavigateTo("addprodotto");
    }

    protected override void OnInitialized()
    {
        LoadProdotti();
    }

    private void Elimina(Prodotto prodottoDaEliminare)
    {
        using var context = DbFactory.CreateDbContext();
        context.Remove(prodottoDaEliminare);
        context.SaveChanges();
        LoadProdotti();
    }

    private void LoadProdotti()
    {
        using var context = DbFactory.CreateDbContext();
        Prodotti = context.Prodotti.ToList();
        Categorie = context.Categorie.ToList();
    }

    private void SelectedCategorieChanged(ChangeEventArgs e)
    {
        if (e.Value is not null)
        {
            SelectedCategorie = (string[])e.Value;
        }
    }
    private void OrdinaPerPrezzo()
    {
        IsCrescentePerPrezzo = !IsCrescentePerPrezzo;
        StateHasChanged();
    }
}
